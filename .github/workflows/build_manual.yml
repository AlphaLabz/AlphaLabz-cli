name: Go Multi-Platform Build and Release (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Number (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    name: Build Go Binary for Multiple Platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build Go Binary
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}

      # Make the built binary executable (for Unix systems)
      - name: Make Binary Executable
        run: chmod +x dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}

      # Upload each platform's build with a unique artifact name
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alphalab-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download all artifacts from the build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      # Confirm all files are downloaded and permissions set correctly
      - name: List Downloaded Files and Fix Permissions
        run: |
          chmod +x dist/*
          ls -la dist/

      # Create the release with all downloaded artifacts (including fixed permissions)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
