name: Go Multi-Platform Build and Release 

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Number (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release Go Binary for Multiple Platforms
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build Go Binary with Static Linking
        run: |
          mkdir -p dist
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -a -ldflags '-extldflags "-static"' -o dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}

      # Ensure executables are properly handled for Unix systems
      - name: Set Executable Permissions (Non-Windows Only)
        if: matrix.goos != 'windows'
        run: chmod +x dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}

      # Ensure Windows uses the .exe extension
      - name: Rename Windows Binary
        if: matrix.goos == 'windows'
        run: mv dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }} dist/alphalab-${{ matrix.goos }}-${{ matrix.goarch }}.exe

      # List files to verify correct permissions and files
      - name: List Files for Debugging
        run: ls -la dist/

      # Ensure separate artifact upload per build to avoid conflicts
      - name: Upload Build Artifacts (per platform)
        uses: actions/upload-artifact@v4
        with:
          name: alphalab-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download all artifacts from the build jobs individually to avoid tar issues
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      # Ensure permissions are set again post-download
      - name: Set Executable Permissions (Non-Windows Only)
        run: |
          find dist/ -type f ! -name "*.exe" -exec chmod +x {} \;

      # Confirm all files are ready
      - name: List Final Files
        run: ls -la dist/

      # Create the release with all downloaded binaries
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
